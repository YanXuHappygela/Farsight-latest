#include "CSVRegressionTestparseArgs.h"

#include <stdexcept>

#include "metaCommand.h"
#include "itksys/SystemTools.hxx"

namespace CSVRegressionTest
{

bool
parseArgs( int argc, char * argv[], Args & args )
{
	// We will parse with MetaCommand
	MetaCommand command;
	command.SetDescription( "This program compares a test comma separated value (CSV)\
 or other delimited text data file against a similar baseline file." );

	command.AddField( "TestCSVFile",
	 	"The CSV file that was generated by the test.",
	 	MetaCommand::FILE,
	 	MetaCommand::DATA_IN
	 	);
	command.AddField( "BaselineCSVFile",
		"The CSV file that should have been generated by the test; the 'gold standard.'",
		MetaCommand::FILE,
		MetaCommand::DATA_IN
		);
	bool required = false;
	command.SetOption( "AbsoluteTolerance", "a",
		required,
		"Absolute tolerance for numerical entries."
		);
	required = true;
	command.AddOptionField( "AbsoluteTolerance", "AbsoluteTolerance",
		MetaCommand::FLOAT,
		required,
		"1e25"
	);

	required = false;
	command.SetOption( "FractionalTolerance", "f",
		required,
		"Fractional tolerance for numerical entries."
		);
	required = true;
	command.AddOptionField( "FractionalTolerance", "FractionalTolerance",
		MetaCommand::FLOAT,
		required,
		"0.03"
	);
	command.SetOptionRange( "FractionalTolerance", "FractionalTolerance",
		"0.0", "1.0" );

	required = false;
	command.SetOption( "Delimiter", "d",
		required,
		"Entry delimiter in the data file."
	);
	required = true;
	command.AddOptionField( "Delimiter", "Delimiter",
		MetaCommand::CHAR,
		required,
		","
	);

	required = false;
	command.SetOption( "OutputFilePrefix", "o",
		required,
		"Output file prefix for error images."
	);
	required = true;
	command.AddOptionField( "OutputFilePrefix", "OutputFilePrefix",
		MetaCommand::FILE,
		required,
		"",
		"OutputPrefix",
		MetaCommand::DATA_OUT
	);

	if( !command.Parse( argc, argv ) )
		{
		return false;
		}
	args.TestCSVFile = command.GetValueAsString( "TestCSVFile" );
	args.BaselineCSVFile = command.GetValueAsString( "BaselineCSVFile" );
	args.AbsoluteTolerance = command.GetValueAsFloat( "AbsoluteTolerance", "AbsoluteTolerance" );
	args.FractionalTolerance = command.GetValueAsFloat( "FractionalTolerance", "FractionalTolerance" );
	args.Delimiter = command.GetValueAsString( "Delimiter", "Delimiter" )[0];
	args.OutputFilePrefix = command.GetValueAsString( "OutputFilePrefix", "OutputFilePrefix" );
	if( args.OutputFilePrefix.length() == 0 )
		{
		std::vector< std::string > components;
		itksys::SystemTools::SplitPath( args.TestCSVFile.c_str(), components );
		std::string testCSVFileBasename = components[components.size()-1];
		testCSVFileBasename = itksys::SystemTools::GetFilenameWithoutExtension( testCSVFileBasename );
		itksys::SystemTools::SplitPath( args.BaselineCSVFile.c_str(), components );
		std::string baselineCSVFileBasename = components[components.size()-1];
		baselineCSVFileBasename = itksys::SystemTools::GetFilenameWithoutExtension( baselineCSVFileBasename );

		args.OutputFilePrefix = testCSVFileBasename + "_vs_" + baselineCSVFileBasename;
		}

	return true;
}

} // end namespace CSVRegressionTest
